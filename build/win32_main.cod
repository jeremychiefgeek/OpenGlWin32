; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32532.0 

	TITLE	C:\development\cpp\OpenGlWin32\build\win32_main.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
	ORG $+3
$SG119790 DB	'S', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	00H, 00H
$SG119791 DB	'OpenGl Win32Api', 00H
$SG119792 DB	'Learn to Program Windows', 00H
	ORG $+3
$SG119793 DB	'OpenGl Win32Api', 00H
CONST	ENDS
PUBLIC	_WinMain@16
PUBLIC	?WindowProc@@YGJPAUHWND__@@IIJ@Z		; WindowProc
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?WindowProc@@YGJPAUHWND__@@IIJ@Z
	DD	0dH
	DD	079H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:_WinMain@16
	DD	0dH
	DD	0f4H
voltbl	ENDS
; Function compile flags: /Odtp
; File C:\development\cpp\OpenGlWin32\src\win32_main.cpp
_TEXT	SEGMENT
_hdc$1 = -76						; size = 4
tv64 = -72						; size = 4
_ps$2 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?WindowProc@@YGJPAUHWND__@@IIJ@Z PROC			; WindowProc

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 62   :     switch (uMsg)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00013	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00016	83 7d b8 02	 cmp	 DWORD PTR tv64[ebp], 2
  0001a	74 08		 je	 SHORT $LN4@WindowProc
  0001c	83 7d b8 0f	 cmp	 DWORD PTR tv64[ebp], 15	; 0000000fH
  00020	74 0e		 je	 SHORT $LN5@WindowProc
  00022	eb 3f		 jmp	 SHORT $LN2@WindowProc
$LN4@WindowProc:

; 63   :     {
; 64   :     case WM_DESTROY:
; 65   :         PostQuitMessage(0);

  00024	6a 00		 push	 0
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4

; 66   :         return 0;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 49		 jmp	 SHORT $LN1@WindowProc
$LN5@WindowProc:

; 67   : 
; 68   :     case WM_PAINT:
; 69   :         {
; 70   :             PAINTSTRUCT ps;
; 71   :             HDC hdc = BeginPaint(hwnd, &ps);

  00030	8d 4d bc	 lea	 ecx, DWORD PTR _ps$2[ebp]
  00033	51		 push	 ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00037	52		 push	 edx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  0003e	89 45 b4	 mov	 DWORD PTR _hdc$1[ebp], eax

; 72   : 
; 73   :             // All painting occurs here, between BeginPaint and EndPaint.
; 74   : 
; 75   :             FillRect(hdc, &ps.rcPaint, (HBRUSH) (COLOR_WINDOW+1));

  00041	6a 06		 push	 6
  00043	8d 45 c4	 lea	 eax, DWORD PTR _ps$2[ebp+8]
  00046	50		 push	 eax
  00047	8b 4d b4	 mov	 ecx, DWORD PTR _hdc$1[ebp]
  0004a	51		 push	 ecx
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 76   : 
; 77   :             EndPaint(hwnd, &ps);

  00051	8d 55 bc	 lea	 edx, DWORD PTR _ps$2[ebp]
  00054	52		 push	 edx
  00055	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8

; 78   :         }
; 79   :         return 0;

  0005f	33 c0		 xor	 eax, eax
  00061	eb 16		 jmp	 SHORT $LN1@WindowProc
$LN2@WindowProc:

; 80   : 
; 81   :     }
; 82   :     return DefWindowProc(hwnd, uMsg, wParam, lParam);

  00063	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00072	51		 push	 ecx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
$LN1@WindowProc:

; 83   : }

  00079	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007c	33 cd		 xor	 ecx, ebp
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 10 00	 ret	 16			; 00000010H
?WindowProc@@YGJPAUHWND__@@IIJ@Z ENDP			; WindowProc
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\development\cpp\OpenGlWin32\src\win32_main.cpp
_TEXT	SEGMENT
_wc$ = -116						; size = 40
_msg$ = -76						; size = 28
_hwnd$ = -48						; size = 4
_CLASS_NAME$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi

; 13   :     // Register the window class.
; 14   :     const wchar_t CLASS_NAME[]  = L"Sample Window Class";

  00012	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00017	be 00 00 00 00	 mov	 esi, OFFSET $SG119790
  0001c	8d 7d d4	 lea	 edi, DWORD PTR _CLASS_NAME$[ebp]
  0001f	f3 a5		 rep movsd

; 15   :     
; 16   :     WNDCLASS wc = { };

  00021	33 c0		 xor	 eax, eax
  00023	89 45 8c	 mov	 DWORD PTR _wc$[ebp], eax
  00026	89 45 90	 mov	 DWORD PTR _wc$[ebp+4], eax
  00029	89 45 94	 mov	 DWORD PTR _wc$[ebp+8], eax
  0002c	89 45 98	 mov	 DWORD PTR _wc$[ebp+12], eax
  0002f	89 45 9c	 mov	 DWORD PTR _wc$[ebp+16], eax
  00032	89 45 a0	 mov	 DWORD PTR _wc$[ebp+20], eax
  00035	89 45 a4	 mov	 DWORD PTR _wc$[ebp+24], eax
  00038	89 45 a8	 mov	 DWORD PTR _wc$[ebp+28], eax
  0003b	89 45 ac	 mov	 DWORD PTR _wc$[ebp+32], eax
  0003e	89 45 b0	 mov	 DWORD PTR _wc$[ebp+36], eax

; 17   : 
; 18   :     wc.lpfnWndProc   = WindowProc;

  00041	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+4], OFFSET ?WindowProc@@YGJPAUHWND__@@IIJ@Z ; WindowProc

; 19   :     wc.hInstance     = hInstance;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _hInstance$[ebp]
  0004b	89 4d 9c	 mov	 DWORD PTR _wc$[ebp+16], ecx

; 20   :     wc.lpszClassName = "OpenGl Win32Api";//CLASS_NAME;

  0004e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+36], OFFSET $SG119791

; 21   : 
; 22   :     RegisterClass(&wc);

  00055	8d 55 8c	 lea	 edx, DWORD PTR _wc$[ebp]
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4

; 23   : 
; 24   :     // Create the window.
; 25   : 
; 26   :     HWND hwnd = CreateWindowEx(

  0005f	6a 00		 push	 0
  00061	8b 45 08	 mov	 eax, DWORD PTR _hInstance$[ebp]
  00064	50		 push	 eax
  00065	6a 00		 push	 0
  00067	6a 00		 push	 0
  00069	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0006e	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00073	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00078	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0007d	68 00 00 cf 00	 push	 13565952		; 00cf0000H
  00082	68 00 00 00 00	 push	 OFFSET $SG119792
  00087	68 00 00 00 00	 push	 OFFSET $SG119793
  0008c	6a 00		 push	 0
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  00094	89 45 d0	 mov	 DWORD PTR _hwnd$[ebp], eax

; 27   :         0,                              // Optional window styles.
; 28   :         "OpenGl Win32Api",                     // Window class
; 29   :         "Learn to Program Windows",    // Window text
; 30   :         WS_OVERLAPPEDWINDOW,            // Window style
; 31   : 
; 32   :         // Size and position
; 33   :         CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
; 34   : 
; 35   :         NULL,       // Parent window    
; 36   :         NULL,       // Menu
; 37   :         hInstance,  // Instance handle
; 38   :         NULL        // Additional application data
; 39   :         );
; 40   : 
; 41   :     if (hwnd == NULL)

  00097	83 7d d0 00	 cmp	 DWORD PTR _hwnd$[ebp], 0
  0009b	75 04		 jne	 SHORT $LN4@WinMain

; 42   :     {
; 43   :         return 0;

  0009d	33 c0		 xor	 eax, eax
  0009f	eb 51		 jmp	 SHORT $LN1@WinMain
$LN4@WinMain:

; 44   :     }
; 45   : 
; 46   :     ShowWindow(hwnd, nCmdShow);

  000a1	8b 4d 14	 mov	 ecx, DWORD PTR _nCmdShow$[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 d0	 mov	 edx, DWORD PTR _hwnd$[ebp]
  000a8	52		 push	 edx
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 47   : 
; 48   :     // Run the message loop.
; 49   : 
; 50   :     MSG msg = { };

  000af	33 c0		 xor	 eax, eax
  000b1	89 45 b4	 mov	 DWORD PTR _msg$[ebp], eax
  000b4	89 45 b8	 mov	 DWORD PTR _msg$[ebp+4], eax
  000b7	89 45 bc	 mov	 DWORD PTR _msg$[ebp+8], eax
  000ba	89 45 c0	 mov	 DWORD PTR _msg$[ebp+12], eax
  000bd	89 45 c4	 mov	 DWORD PTR _msg$[ebp+16], eax
  000c0	89 45 c8	 mov	 DWORD PTR _msg$[ebp+20], eax
  000c3	89 45 cc	 mov	 DWORD PTR _msg$[ebp+24], eax
$LN2@WinMain:

; 51   :     while (GetMessage(&msg, NULL, 0, 0) > 0)

  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	8d 4d b4	 lea	 ecx, DWORD PTR _msg$[ebp]
  000cf	51		 push	 ecx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessageA@16
  000d6	85 c0		 test	 eax, eax
  000d8	7e 16		 jle	 SHORT $LN3@WinMain

; 52   :     {
; 53   :         TranslateMessage(&msg);

  000da	8d 55 b4	 lea	 edx, DWORD PTR _msg$[ebp]
  000dd	52		 push	 edx
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateMessage@4

; 54   :         DispatchMessage(&msg);

  000e4	8d 45 b4	 lea	 eax, DWORD PTR _msg$[ebp]
  000e7	50		 push	 eax
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4

; 55   :     }

  000ee	eb d6		 jmp	 SHORT $LN2@WinMain
$LN3@WinMain:

; 56   : 
; 57   :     return 0;

  000f0	33 c0		 xor	 eax, eax
$LN1@WinMain:

; 58   : };

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	33 cd		 xor	 ecx, ebp
  000f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 10 00	 ret	 16			; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
